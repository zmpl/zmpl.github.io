<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zmpl&#39;s blogs</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-12-12T11:52:42.048Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zmpl</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL数据库总结</title>
    <link href="http://yoursite.com/2019/12/12/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/12/12/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E6%80%BB%E7%BB%93/</id>
    <published>2019-12-12T11:52:42.048Z</published>
    <updated>2019-12-12T11:52:42.048Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL数据库总结"><a href="#MySQL数据库总结" class="headerlink" title="MySQL数据库总结"></a>MySQL数据库总结</h1><h3 id="数据库的常见问题"><a href="#数据库的常见问题" class="headerlink" title="数据库的常见问题"></a>数据库的常见问题</h3><ol><li><p>数据库的默认端口:3306<br>常见名词:<br>DB:数据库<br>DBS:数据库系统<br>DBMS:数据库管理系统<br>DBMA:数据库管理人员</p></li><li><p>sql的功能:<br>DDL:数据定义功能 CREATE  、ALTER、DROP<br>DBML:数据操纵功能 SELECT、insert、update、delete<br>mDCL:数据控制功能 安全管理 grant、revoke</p></li><li><p>数据库使用的语言: 结构化查询语言sql</p></li><li><p>常量:<br>字符串常量、数值常量、十六进制常量、日期时间常量、位字段值、布尔值、NULL值</p></li><li><p>变量:<br>用户变量:<br>   <code>@one</code><br>系统变量:<br>  <code>@@two</code>    </p></li></ol><ol start="7"><li>运算符:<br>  <code>&#39;+&#39; &#39;-&#39; &#39;*&#39; &#39;/&#39; &#39;%&#39;</code><br>  <code>&#39;&amp;&#39; &#39;|&#39; &#39;^&#39; &#39;~&#39; &#39;&gt;&gt;&#39; &#39;&lt;&lt;&#39;</code><br>  <code>&#39;=&#39; &#39;&gt;=&#39; &#39;&lt;=&#39; &#39;&gt;&#39; &#39;&lt;&#39; &#39;!=&#39; &#39;&lt;&gt;&#39; &#39;&lt;=&gt;&#39;</code>(相等或都等于空)</li><li>常用内置函数:<br>数学函数:<code>abs(),sqrt(),floor(),rand(),truncate()</code>,<br>聚合函数: <code>COUNT(),sum(),avg(),max(),min()</code>,<br>字符串函数: <code>ASCii(),char(),substring(),concat(),upper(),ucase(),lower(),left()</code>,<br>日期和时间函数: <code>now(),year(),month(),day(),curdate(),current_date(),curtime(),current_time()</code>,<br>加密函数: <code>encode(),encrypt()</code>,<br>控制流程函数: <code>if(),ifNULL()</code>,<br>格式化函数: <code>format()</code>,<br>类型转换函数:<code>case()</code>,<br>系统信息函数: <code>user(),version()</code>,</li></ol><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ol><li><p>数据库的创建:<br><code>CREATE   database | schema db_name;</code><br>db_name的命名规则:可以是0-9,26个英文字母和’_’ ‘#’组成,不能是数据库中的关键字或保留字<br>创建的时候指定默认字符集和默认校对规则</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE   database | schema db_name;</span><br><span class="line">     default character set 字符集名称</span><br><span class="line">     default collate 校对规则名称;</span><br></pre></td></tr></table></figure><p>常用字符集:<code>utf8 gb2312 gbk</code><br>常用校对规则 <code>utf8_general_ci gb2312_chinese_ci gbk_chinese_ci</code></p></li><li><p>数据库的修改<br>修改数据库的默认字符集和默认校对规则</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER database | schema db_name</span><br><span class="line"> default character set 字符集名称</span><br><span class="line"> default collate 校对规则名称;</span><br></pre></td></tr></table></figure></li><li><p>数据库的删除<br><code>DROP database | schema db_name;</code></p></li><li><p>选择数据库<br><code>use db_name;</code></p></li><li><p>关于数据库的一些信息查询<br>查看当前选择的数据库<br>  <code>SELECT database() | schema();</code><br>查看mysql中所有的的数据库<br>  <code>show database | schemas;</code><br>查看mysql中支持的字符集和与字符集对应的默认校对规则<br>   <code>show charset;</code><br>查看mysql中支持的校对规则<br>   <code>show collation;</code><br>查看默认字符集<br>   <code>show variables like &#39;character%&#39;;</code><br>查看默认校对规则<br>   <code>show variables like &#39;collation%&#39;;</code><br>查看mysql支持的存储引擎<br>   <code>show engines;</code><br>查看当前登录的用户<br>  <code>SELECT user();</code><br>查看mysql的版本<br>  <code>SELECT version();</code></p></li></ol><h2 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表</h2><ol><li><p>表的创建</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE   TABLE tb_name</span><br><span class="line">(</span><br><span class="line">col_name1 INT,</span><br><span class="line">   col_name2 char(20),</span><br><span class="line">   col_name3 VARCHAR(20),</span><br><span class="line">   col_name4 float(7),</span><br><span class="line">   ......</span><br><span class="line">)engine=engine_name;</span><br></pre></td></tr></table></figure><pre><code>tb_name的命名规则和数据库名一样字符的数据类型可以是:  `bit,tinyINT,smALLINT,mediumINT,INT,INTeger,bigINT`  `real,double,float,decimal,numeric` 表示指定精度的浮点型数值          `date,time,timestamp,datetime`  `char,VARCHAR,text,tinytext`  `blob,mediumblobm,longblob,tinytext,text,mediumtext,longtext`  `enum(value1,value2,value3,...)`  `set(value1,value2,value3,value4,value5)`</code></pre></li><li><p>自增属性:auto_increment 只能定义在INT类型上 自动增长的功能</p><pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE   TABLE test</span><br><span class="line">(</span><br><span class="line">testno INT auto_increment PRIMARY KEY,</span><br><span class="line">testname VARCHAR(20)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></code></pre></li><li><p>修改表<br>ALTER后面可以跟上多个MODIFY,change子句,子句之间用逗号隔开<br><strong>添加字段</strong><br>添加在所有字段前面<br>  <code>ALTER TABLE test add testno INT first;</code><br>添加在某个字段后面<br>  <code>ALTER TABLE test add testno INT after col_name;</code><br><strong>修改字段</strong><br>修改数据类型,字段位置<br><code>ALTER TABLE tb_name MODIFY testno char(20) after col_name;</code><br>修改字段名,字段位置,数据类型<br><code>ALTER TABLE tb_name changes testno tno INT after col_name;</code><br>修改字段默认值<br><code>ALTER TABLE tb_name ALTER [column] testno set default &#39;1&#39;;</code><br><strong>删除字段</strong><br><code>ALTER TABLE tb_name DROP col_name;</code><br><strong>重命名表</strong><br>方法1:<br><code>ALTER TABLE old_tb_name rename to new_tb_name;</code><br>方法2:<br><code>rename TABLE old_tb_name to new_tb_name</code>;<br>修改多个表名<br><code>rename TABLE old_tb_name to new_tb_name,old2_tb_name to new2_tb_name,......;</code><br> <strong>删除表</strong><br> <code>DROP TABLE tb_name;</code><br> <strong>查看表的相关信息</strong><br>查看当前库某个表的结构<br> <code>DESC tb_name;</code><br> <code>show columns FROM | in tb_name;</code><br>查看某个库某个表的结构<br>  <code>show columns FROM | in tb_name FROM | INT db_name;</code><br>查看当前库某个表的详细结构<br>   <code>show CREATE   TABLE tb_name \g | \G</code>  –&gt; \g的作用是以列表的形式查询内容 \g是以表格的形式查看内容</p></li><li><p>实体完整性约束<br>主键约束:<code>PRIMARY KEY</code><br>表级创建语法:</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE   TABLE test</span><br><span class="line">(</span><br><span class="line">   testno INT,   # -- &gt;&gt;&gt;INT默认长度11</span><br><span class="line">   testname VARCHAR(20),</span><br><span class="line">   CONSTRAINT test_pr PRIMARY KEY(testno)  #-- &gt;&gt;&gt;主键可以自定义名,但是定义无效</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ol><p>   列级创建语法:<br>   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE   TABLE test</span><br><span class="line">(</span><br><span class="line">  testno INT PRIMARY KEY,</span><br><span class="line">  testname VARCHAR(20)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><br>   一个表中只能存在一个主键,主键可以定义在多列上形成复合主键。<br>   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE   TABLE test</span><br><span class="line">(</span><br><span class="line">   testno INT,</span><br><span class="line">   testname VARCHAR(20),</span><br><span class="line">   testnum INT,</span><br><span class="line">   PRIMARY KEY(testno,testnum)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><br>   定义主键的时候同时会增加一个主键索引<br>   定义的主键上不能出现空值</p><p>   <code>ALTER TABLE</code>的方式对已存在的表添加主键:<br>   <code>ALTER TABLE test add CONSTRAINT test_pr PRIMARY KEY(test);</code><br>   添加复合主键的方式与添加主键的方式相同<br>   <code>ALTER TABLE test add CONSTRAINT test_pr PRIMARY KEY(test,test2,...);</code></p><p>  候选键约束:UNIQUE KEY<br>  候选键又称唯一约束,候选键的值必须是唯一的,并且不能为空<br>   表级创建语法<br>   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE   TABLE test</span><br><span class="line">(</span><br><span class="line">testno INT,</span><br><span class="line">testname VARCHAR(20),</span><br><span class="line">testnum INT,</span><br><span class="line">CONSTRAINT uk_tno UNIQUE KEY(testno),</span><br><span class="line">CONSTRAINT uk_tname_tnum UNIQUE KEY(testname,testnum)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><br>   列级创建语法<br>   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE   TABLE test</span><br><span class="line">(</span><br><span class="line">testno INT UNIQUE KEY,</span><br><span class="line">   testname VARCHAR(20) UNIQUE KEY,</span><br><span class="line">   testnum INT</span><br><span class="line">);</span><br></pre></td></tr></table></figure><br>  删除候选键约束:<br>    <code>ALTER TABLE test DROP index uk_name;</code> –&gt;<code>uk_name</code>:候选键约束名<br>  或 <code>DROP index uk_name on test;</code></p><ol start="5"><li><p>参照性约束<br>参照完整性规则定义的是外键与主键之间的引用规则,即外键的取值或为空,或者等于被参照关系中某个主键的值。<br>定义外键的规则:</p><ul><li><p>被参照表必须已创建或者正在创建,被参照表是正在创建的表那参照表也是正在创建的表</p></li><li><p>被参表必须定义主键或候选键</p></li><li><p>必须在被参表的表名后面指定列名或列名的组合，这个列或列组合必须是被参照表的主键或候选键</p></li><li><p>主键不能包含空值,但允许在外键中出现空值.这意味着只要外键的每个非空值出现在指定的主键中，这个外键的内容就是正确的</p></li><li><p>外键对应列的数目必须和参照表的主键对应列的数目相同</p></li><li><p>外键对应列的数据类型必须和被参照表的主键对应列的数据类型相同</p></li><li><p>外键只能定义在主键或候选键上</p></li><li><p>外键只能定义在<code>innodb</code>表上</p></li></ul><p>表级创建语法:</p><p>被参照表:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE   TABLE test1</span><br><span class="line">(</span><br><span class="line">   testno INT PRIMARY KEY,</span><br><span class="line">   testname VARCHAR(20),</span><br><span class="line">   testnum INT</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>参照表:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE   TABLE test2</span><br><span class="line">(</span><br><span class="line">   testno INT,</span><br><span class="line">   testname VARCHAR(20),</span><br><span class="line">   testnum INT,</span><br><span class="line">   CONSTRAINT fk_tno FOREIGN KEY(testno) references test1(testno)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>关闭外键检查</p><pre><code>`set foreign_key_checks=0;`</code></pre><p>开启外键检查</p><pre><code>`set foreign_key_checks=1;`</code></pre></li><li><p>用户定义的完整性约束</p><p>非空约束:指字段值不能为空</p><p>创建语法:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. CREATE   TABLE</span><br><span class="line">   CREATE   TABLE test</span><br><span class="line">   (</span><br><span class="line">      testno INT NOT NULL UNIQUE KEY,</span><br><span class="line">      testname VARCHAR(20) UNIQUE KEY,</span><br><span class="line">      testnum INT</span><br><span class="line">   );</span><br><span class="line">2. ALTER TABLE</span><br><span class="line">   ALTER TABLE test MODIFY testno INT NOT NULL;</span><br><span class="line">      </span><br><span class="line">   ALTER TABLE test change testno tno INT NOT NULL;</span><br></pre></td></tr></table></figure><p>默认值约束</p><p>创建语法:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. CREATE   TABLE</span><br><span class="line">   CREATE   TABLE test</span><br><span class="line">   (</span><br><span class="line">      testno INT default &apos;1&apos; UNIQUE KEY,</span><br><span class="line">      testname VARCHAR(20) UNIQUE KEY,</span><br><span class="line">      testnum INT</span><br><span class="line">   );</span><br><span class="line">2. ALTER TABLE</span><br><span class="line">   ALTER TABLE test MODIFY testno INT default &apos;1&apos;;</span><br><span class="line">      </span><br><span class="line">   ALTER TABLE test change testno tno default &apos;1&apos;;</span><br></pre></td></tr></table></figure><p>更新约束:</p><p>添加约束:</p><p><code>ALTER TABLE test add [CONSTRAINT] {FOREIGN KEY | PRIMARY KEY | UNIQUE KEY}(col_name,col2_name,......);</code></p><p>删除外键约束:</p><p><code>ALTER TABLE test DROP FOREIGN KEY fk_name;</code>  –&gt; fk_name: 外键约束名</p></li></ol><h2 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h2><p>​               </p><p>​                     </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MySQL数据库总结&quot;&gt;&lt;a href=&quot;#MySQL数据库总结&quot; class=&quot;headerlink&quot; title=&quot;MySQL数据库总结&quot;&gt;&lt;/a&gt;MySQL数据库总结&lt;/h1&gt;&lt;h3 id=&quot;数据库的常见问题&quot;&gt;&lt;a href=&quot;#数据库的常见问题&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>jQuery笔记</title>
    <link href="http://yoursite.com/2019/12/11/jQuery%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/12/11/jQuery%E7%AC%94%E8%AE%B0/</id>
    <published>2019-12-11T07:54:02.901Z</published>
    <updated>2019-12-11T07:54:02.897Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jQuery笔记"><a href="#jQuery笔记" class="headerlink" title="jQuery笔记"></a>jQuery笔记</h1><p>jQuery 很容易学习。</p><p>jQuery 是一个 JavaScript 库。</p><p>jQuery 极大地简化了 JavaScript 编程。</p><p>jQuery是一个轻量级的”写的少，做的多”的JavaScript库。  </p><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法:"></a>基础语法:</h3><p><code>$(selector).action()</code>,<code>$</code>表示JQuery,<code>selector</code>表示选择器,<code>action</code>表示执行的动作。  </p><p><strong>文档就绪事件</strong><br>该事件可以防止文档在完全加载（就绪）之前运行 jQuery 代码，即在 DOM 加载完成后才可以对 DOM 进行操作。<br><img src="../../../../images/jQueryImg/ready.png" alt="ready"><br>简写语法:  </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(function ()&#123;</span><br><span class="line">// 这里开始写jQuery代码...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>以上的方法都实现文档就绪后执行jQuery方法。<br><strong>JavaScript的window.load方法和jQuery中的ready方法的区别:</strong><br><img src="../../../../images/jQueryImg/load%E6%96%B9%E6%B3%95%E5%92%8Cready%E6%96%B9%E6%B3%95%E5%88%86%E7%9A%84%E5%8C%BA%E5%88%AB.jpeg" alt="load和ready的区别"></p><p>jQuery入口函数与JavaScript入口函数的区别:  </p><ul><li>jQuery的入口函数是在html所有标签(DOM)都加载之后，就执行jQuery代码。</li><li>JavaScript的window.onload事件是等到所有内容，包括外部图片之类的文件加载完后，才会执行。  </li></ul><h3 id="jQuery选择器"><a href="#jQuery选择器" class="headerlink" title="jQuery选择器"></a>jQuery选择器</h3><h4 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h4><ol><li>元素选择器:<code>$(&quot;div&quot;)</code>选择所有的div元素。</li><li>id选择器:<code>$(&quot;#one&quot;)</code>选择id=one的元素。</li><li>类选择器:<code>$(&quot;.two&quot;)</code>选择class=two的所有元素。</li><li>并集选择器:<code>$(&quot;selector,selector1,...,selectorn&quot;)</code>选择所有selector元素，所有selector1元素，…，所有selectorn元素。</li><li>全局选择器:<code>$(&quot;*&quot;)</code>选择所有元素。</li></ol><h4 id="层次选择器"><a href="#层次选择器" class="headerlink" title="层次选择器"></a>层次选择器</h4><ol><li>后代选择器:<code>$(&quot;div span&quot;)</code>获取div后代中所有span元素。</li><li>子类选择器:<code>$(&quot;div&gt;span&quot;)</code>获取div直接子类中所有span元素。</li><li>相邻元素选择器:<code>$(&quot;div span&quot;)</code>获取div的下一个元素，span元素。</li><li>同辈选择器:<code>$(&quot;div~span&quot;)</code>获取div之后的所有span元素。</li></ol><p>####　属性选择器:</p><ol><li><p>[attribute]:<code>$(&quot;[href]&quot;)</code>获取包含href属性的所有元素 。</p></li><li><p>[attribute=value]:<code>$(&quot;href=&#39;http&#39;&quot;)</code>获取所有href=”http”的元素。</p></li><li><p>[attribute!=value]:<code>$(&quot;href!=&#39;http&#39;&quot;)</code>获取所有href!=”http”的元素。</p></li><li><p>[attribute^=value]:<code>$(&quot;href^=&#39;bc&#39;&quot;)</code>获取所有href=”abc”,href属性=bc结尾的元素。</p></li><li><p>[selector] [selector1] […] [selectorn]:<code>$(&quot;li[id][href=&#39;http&#39;][width=&#39;100px&#39;]&quot;)</code>获取含有id属性并且href=”http”,width=”100px”的所有li元素。</p></li></ol><h4 id="基本过滤选择器"><a href="#基本过滤选择器" class="headerlink" title="基本过滤选择器:"></a>基本过滤选择器:</h4><ol><li><code>:first</code>     选择第一个元素      <code>$(&quot;div:first&quot;)</code> 选择第一个div元素</li><li><code>:last</code>       选择最后一个元素  <code>$(&quot;div:last&quot;)</code>选择最后一个div元素</li><li><code>:even</code>       选择所有下标为偶数的元素(下标从0开始)    <code>$(&quot;div:even&quot;)</code>选择下标为偶数的所有div元素</li><li><code>:odd</code>         选择所有下标为奇数的元素(下标从0开始)    <code>$(&quot;div:odd&quot;)</code>选择下标为奇数的所有div元素</li><li><code>:eq(index)</code>      选择所有id=index的元素   <code>$(&quot;div:eq(1)&quot;)</code>选择下标为1的div元素</li><li><code>:gt(index)</code>      选择所有id&gt;index的元素   <code>$(&quot;div:gt(1)&quot;)</code>选择下标大于1的所有div元素。</li><li><code>:lt(index)</code>      选择所有id&lt;index的元素   <code>$(&quot;div:lt(2)&quot;)</code>选择下标小于2的所有div元素。</li><li><code>:not(selectors)</code>   选择不包括selectors的所有元素，selectors可以是多个，用<code>,</code>隔开。 <code>$(&quot;li:not(:first)&quot;)</code>选择除开第一个的所有li元素。</li></ol><h4 id="内容过滤选择器"><a href="#内容过滤选择器" class="headerlink" title="内容过滤选择器:"></a>内容过滤选择器:</h4><ol><li><p><code>:contains(text)</code>   选择元素内容包括text的所有元素。   <code>$(&quot;div:contains(&#39;hello&#39;)&quot;)</code>选择包含hello的所有元素。</p></li><li><p><code>:empty</code>            选择内容为空的所有元素。 <code>$(&quot;div:empty&quot;)</code>选择为空的div元素。</p></li><li><p><code>:has(selctor)</code>       选择含有选择器匹配的所有元素的元素。 <code>$(&quot;div:has(span)&quot;)</code>选择div含有span的所有span元素。</p></li><li><p><code>parent</code>                       匹配含有内容或文本的元素。  <code>$(&quot;div:parent&quot;)</code>选择含有内容的div元素。</p></li></ol><ul><li><p>可见性过滤选择器</p><ol><li><code>:hidden</code>      选择所有隐藏元素      <code>$(&quot;div:hidden&quot;)</code>选择所有隐藏的div元素。</li><li><code>visible</code>      选择所有显示元素    <code>$(&quot;div:visible&quot;)</code>选择所有可见的div元素。</li></ol></li></ul><h3 id="jQuery对样式操作"><a href="#jQuery对样式操作" class="headerlink" title="jQuery对样式操作"></a>jQuery对样式操作</h3><h5 id="css"><a href="#css" class="headerlink" title="css():"></a>css():</h5><p>设置指定元素的样式。  </p><p><code>$(&quot;div:first&quot;).css(&quot;color&quot;,&quot;red&quot;);</code> 设置第一个div的字体颜色为红</p><h5 id="addClass-class"><a href="#addClass-class" class="headerlink" title="addClass(class):"></a>addClass(class):</h5><p>为指定元素添加样式，class可以是多个。</p><h5 id="removeClass-“style”"><a href="#removeClass-“style”" class="headerlink" title="removeClass(“style”):"></a>removeClass(“style”):</h5><p>移除指定元素的样式,style可以是多个。</p><h5 id="toggleClass-class"><a href="#toggleClass-class" class="headerlink" title="toggleClass(class):"></a>toggleClass(class):</h5><p>实现样式切换。</p><h3 id="jQuery对元素操作"><a href="#jQuery对元素操作" class="headerlink" title="jQuery对元素操作"></a>jQuery对元素操作</h3><h5 id="html"><a href="#html" class="headerlink" title="html():"></a>html():</h5><p><code>html()</code>可以对元素内容进行操作，相当于js的innerHTML。</p><h5 id="text"><a href="#text" class="headerlink" title="text():"></a>text():</h5><p><code>text()</code>可以获取或设置元素的内容。</p><h5 id="val"><a href="#val" class="headerlink" title="val():"></a>val():</h5><p><code>val()</code>可以设置或获取元素的value值。</p><h5 id="attr"><a href="#attr" class="headerlink" title="attr():"></a>attr():</h5><p><code>attr()</code>用来设置或获取元素属性。</p><h5 id="removeAttr"><a href="#removeAttr" class="headerlink" title="removeAttr():"></a>removeAttr():</h5><p><code>removeAttr(&quot;title&quot;)</code>用来删除元素的属性。</p><h3 id="jQuery对节点操作"><a href="#jQuery对节点操作" class="headerlink" title="jQuery对节点操作"></a>jQuery对节点操作</h3><p><strong>$(selector): 通过选择器获取节点。</strong></p><p><strong>$(element):把DOM节点转换成jQuery节点。</strong></p><p><strong>$(html):使用HTML字符串创建节点。</strong></p><h4 id="元素内部插入节点"><a href="#元素内部插入节点" class="headerlink" title="元素内部插入节点"></a>元素内部插入节点</h4><p><code>append(content)</code>:   <code>$(A).append(B)</code>表示将B追加到A中。如: <code>$(&quot;ul&quot;).append($newNode);</code></p><p><code>appendTo(content)</code>:  <code>$(A).appendTo(B)</code>表示把A追加到B中。 如: <code>$newNode.appendTo(&quot;ul&quot;);</code></p><p><code>prepend(content)</code>: <code>$(A).prepend(B)</code>表示将B前置插入到A中。如<code>$(&quot;ul&quot;).prepend($newNode);</code></p><p><code>prependTo(content)</code>: <code>$(A).prependTo(B)</code>表示将A前置插入到B中。如: <code>$newNode.prependTo(&quot;ul&quot;);</code></p><h4 id="插入同级元素"><a href="#插入同级元素" class="headerlink" title="插入同级元素"></a>插入同级元素</h4><p><code>after(content)</code>: <code>$(A).after(B)</code>表示将B插入到A之后。 <code>$(&quot;ul&quot;).after($newNode)</code>。</p><p><code>insertAfter(content)</code>: <code>$(A).insertAfter(B)</code>表示将A插入到B之后。如<code>$newNode.insertAfter(&quot;ul&quot;);</code></p><p><code>before(content)</code>: <code>$(A).before(B)</code>表示将B插入到A之前。如<code>$(&quot;ul&quot;).before($newNode);</code></p><p><code>insertBefore(content)</code>: <code>$(A).insertBefore(B)</code>表示将A插入到B之前。如<code>$newNode.insertBefore(&quot;ul&quot;);</code></p><h4 id="复制节点"><a href="#复制节点" class="headerlink" title="复制节点"></a>复制节点</h4><p><code>clone()</code></p><p>例:</p><p>​    <code>$(&quot;ul li:eq(1)&quot;).clone(true).appendTo(&quot;ul&quot;);</code></p><p>将ul下的第一个li复制给ul。</p><h4 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h4><p><code>remove()</code>:删除整个节点。</p><p><code>empty()</code>:清空节点内容。</p><h4 id="获取子节点"><a href="#获取子节点" class="headerlink" title="获取子节点"></a>获取子节点</h4><p><code>children()</code>：获取元素的所有子元素，只能获取下一级子元素。 如 <code>div&gt;span&gt;a</code>只能获取 所有span元素。</p><p><code>find()</code>:获取元素的所有指定后代元素。 如<code>div&gt;span&gt;a&gt;span</code>获取div下的所有span元素(包扩a元素下的span)。</p><h4 id="获取同级元素"><a href="#获取同级元素" class="headerlink" title="获取同级元素"></a>获取同级元素</h4><p><code>next([expr])</code>: 用于获取紧邻匹配元素之后的元素。</p><p><code>nextAll([expr])</code>:用户获取紧邻匹配元素之后的所有同级元素。</p><p><code>prev([expr])</code>:用于获取紧邻匹配元素之前的元素。</p><p><code>prevAll([expr])</code>:用户获取紧邻匹配元素之前的所有同级元素。</p><p><code>siblings([expr])</code>:用于获取位于匹配元素前面和后面的所有同辈元素。</p><h4 id="遍历前辈元素"><a href="#遍历前辈元素" class="headerlink" title="遍历前辈元素"></a>遍历前辈元素</h4><p><code>parent()</code>:获取元素的父级元素。</p><p><code>parents()</code>:获取元素的祖先元素。</p><h3 id="jQuery事件"><a href="#jQuery事件" class="headerlink" title="jQuery事件"></a>jQuery事件</h3><h4 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h4><p><code>click()</code>：触发或将函数绑定到指定元素的click事件。</p><p><code>mouseover()</code>: 触发或将函数绑定到指定的mouseover事件。</p><p><code>mouseout()</code>:触发或将函数绑定到指定的mouseout事件。</p><p>……</p><h4 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h4><p><code>keydown()</code>: 触发或将函数绑定到指定元素的keydown事件。</p><p><code>keyup()</code>: 触发或将函数绑定到指定元素的keyup事件。</p><p><code>keypress()</code>: 触发或将函数绑定到指定元素的keypress事件。</p><h4 id="其它事件"><a href="#其它事件" class="headerlink" title="其它事件"></a>其它事件</h4><p><code>focus()</code>: 触发或将函数绑定到指定元素的focus事件。</p><p><code>blur()</code>: 触发或将函数绑定到指定的blur事件。</p><p><code>submit()</code>: 当该提交表单时，会发生submit事件，该事件只适用于表单元素。</p><h4 id="绑定或取消事件"><a href="#绑定或取消事件" class="headerlink" title="绑定或取消事件"></a>绑定或取消事件</h4><p><code>on()</code>: 在选择元素上绑定一个或多个事件的事件处理函数。</p><p><code>off()</code>: 在选择元素上解绑一个或多个事件的事件处理函数。</p><p><strong><code>off()</code>不带参数，取消所有事件</strong></p><h3 id="jQuery动画"><a href="#jQuery动画" class="headerlink" title="jQuery动画"></a>jQuery动画</h3><p><code>show()</code>: 在显示元素时，能定义显示元素时的效果。比如显示速度。 可取值: <strong>毫秒,slow,normal,fast</strong></p><p><code>hide()</code>: 用于隐藏元素。</p><p><code>toggle()</code>: 用于切换元素的可见状态。</p><p><code>fadeIn()和fadeOut()</code>: 可以通过改变元素的透明度实现淡入淡出效果。</p><p><code>fadeToggle()</code>: 可以切换元素的淡入淡出效果。</p><p><code>slideDown()</code>: 可以使元素逐步缩短直至隐藏。</p><p><code>slideUp()</code>: 则使元素逐步缩短直至隐藏。</p><p><code>slideToggle()</code>: 可以使元素在上拉和下拉切换。</p><p><code>anmite()</code>:  可以通过控制元素改变样式的过程的时间来实现动画效果。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;jQuery笔记&quot;&gt;&lt;a href=&quot;#jQuery笔记&quot; class=&quot;headerlink&quot; title=&quot;jQuery笔记&quot;&gt;&lt;/a&gt;jQuery笔记&lt;/h1&gt;&lt;p&gt;jQuery 很容易学习。&lt;/p&gt;
&lt;p&gt;jQuery 是一个 JavaScript 库。&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python笔记</title>
    <link href="http://yoursite.com/2019/12/10/python%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/12/10/python%E7%AC%94%E8%AE%B0/</id>
    <published>2019-12-09T16:19:39.003Z</published>
    <updated>2019-12-09T16:19:39.003Z</updated>
    
    <content type="html"><![CDATA[<p>Python是一种跨平台的计算机程序设计语言。是一种面向对象的动态类型语言，最初被设计用于编写自动化脚本(shell)，随着版本的不断更新和语言新功能的添加，越来越多被用于独立的、大型项目的开发。  </p><h3 id="python代码编写"><a href="#python代码编写" class="headerlink" title="python代码编写"></a>python代码编写</h3><h6 id="python的注释"><a href="#python的注释" class="headerlink" title="python的注释"></a>python的注释</h6><p>1.单行注释<br><code>单行注释:</code><img src="../../../../images/py_img/danhang.png" alt="单行注释"><br>2.多行注释<br><code>多行注释1:</code><img src="../../../../images/py_img/duohang_1.png" alt="多行注释1"><br><code>多行注释2:</code><img src="../../../../images/py_img/duohang_2.png" alt="多行注释2">  </p><p>3.空格缩进<br>python中空格表示缩进<br>例如:<br><img src="../../../../images/py_img/for_suojin.png" alt="for循环"><br>如果上面的for循环中，没有缩进<code>print()</code>将不是for循环的语句<br><strong>在python的代码的编写中，保持良好的代码缩进风格，也要使用好空格</strong><br>例如:<br><img src="../../../../images/py_img/kg_use.png" alt="空格使用"><br>在使用操作符的时候最好在操作符两端加上一个空格，在使用<code>,</code>号时最好在<code>,</code>号后加一个空格  </p><h3 id="python变量和数据类型"><a href="#python变量和数据类型" class="headerlink" title="python变量和数据类型"></a>python变量和数据类型</h3><h6 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h6><ul><li>python中的变量必须先声明后使用，不然会报未定义错误  </li><li><strong>python中没有常量，python中的常量知识逻辑上的常量</strong>  </li><li>变量可以用<code>del</code>删除，删除后再使用会报未定义错误，对象没有引用会被垃圾回收器回收。  </li><li>python中定义变量不用声明数据类型，变量的数据类型由变量值决定。<br>例如:<br><img src="../../../../images/py_img/bldy.png" alt="定义变量"><br>b是<code>int</code>类型,c是<code>float</code>类型,d是<code>bool</code>类型,e是<code>str</code>类型,f也是<code>str</code>类型  </li></ul><h6 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h6><p>python是动态类型语言(变量类型由变量值确定)，也是强类型语言(每个对象都有数据类型，只支持该数据类型的操作)  </p><p><strong>类型转换:</strong><br>小数转整数:截掉小数保留整数<code>int(3.23)=&gt;3</code><br>字符串数字:转成对应的整数<code>int(&quot;1234&quot;)=&gt;1234</code><br>布尔值转整数:True转换1，false转成0<code>int(True)=&gt;1,int(False)=&gt;0</code><br>整数和小数相加自动转换成小数<br><code>float(x)</code>将x转换成<code>float</code>类型，x不变，产生新的对象。</p><h5 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h5><p><code>+</code>:加号运算符<br><code>-</code>:减号运算符<br><code>*</code>:乘号运算符<br><code>/</code>:除号运算符(有小数)<br><code>//</code>:加号运算符(小数截掉)<br><code>%</code>:取余运算符<br><code>**</code>:乘方运算符<br><code>==</code>:恒等运算符，判断对象内容是否相同<br><code>is</code>:判断两个对象是否相同(比较地址)，<strong>在python中解释器会缓存(-5-255)的整数数，这之间的数都是同一对象(两个对象值相等就相等)。在pycharm中所有整数和小数都是同一对象。</strong><br><code>is not</code>:判断两个对象是否是不同对象。<br><code>is</code>主要用于判断变量和None  </p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p><strong>字符串的本质是字符序列，python中的字符串是不可变的</strong>。<br>python不支持字符，单个字符也是字符串。<br>python3支持unicode编码,默认就是16位的unicode编码  </p><h5 id="字符串的创建"><a href="#字符串的创建" class="headerlink" title="字符串的创建"></a>字符串的创建</h5><p><code>a=&#39;abc&#39;或a=&quot;abc&quot;</code>,如果字符串中存在单引号可以用双引号包裹字符串，反之字符串中有双引号则用单引号包裹字符串。也可以在字符串中用<code>\&#39;</code>转义单引号，同样双引号也可以儿这样转义。  </p><h5 id="字符串处理常用方法"><a href="#字符串处理常用方法" class="headerlink" title="字符串处理常用方法"></a>字符串处理常用方法</h5><p><code>ord()</code>:将字符转成Unicode码的十进制表示。<br><code>chr()</code>:将十进制数字转换成Unicode码的对应字符。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Python是一种跨平台的计算机程序设计语言。是一种面向对象的动态类型语言，最初被设计用于编写自动化脚本(shell)，随着版本的不断更新和语言新功能的添加，越来越多被用于独立的、大型项目的开发。  &lt;/p&gt;
&lt;h3 id=&quot;python代码编写&quot;&gt;&lt;a href=&quot;#py
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
